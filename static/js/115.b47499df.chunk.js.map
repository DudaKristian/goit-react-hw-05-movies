{"version":3,"file":"static/js/115.b47499df.chunk.js","mappings":"uMAuCA,UAlCa,WACT,IAAMA,GAAUC,EAAAA,EAAAA,MAEhB,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KAMA,IAJAC,EAAAA,EAAAA,YAAU,YACNC,EAAAA,EAAAA,IAAaN,EAASI,KACvB,CAACJ,IAECG,EACL,OAAuB,IAAnBA,EAAOI,SACA,SAAC,KAAD,CAAUC,GAAG,IAAIC,SAAO,KAI/B,0BACI,wBACKN,EAAOO,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,KAAMC,EAA3B,EAA2BA,UAA3B,OAChB,2BACI,gBACIC,IAAKH,EAAY,yCAAsCA,GAAmBI,EAC1EC,IAAG,UAAKJ,EAAL,WACHK,MAAM,SAEN,mBACJ,0BAAOL,KACP,mBACA,0CAAkBC,OATbH,Y,oLCtBrB,EADY,mCCECQ,EAAc,gCAGpB,SAAeC,EAAtB,iDAAO,OAAP,oBAAO,WAA2BC,EAASC,GAApC,0FAGOC,MAAM,GAAD,OAAIJ,EAAJ,gCAAuCK,EAAvC,kBAAoDH,EAApD,2BACNI,MAAK,SAAAtB,GAAM,OAAIA,EAAOuB,UACtBD,MAAK,SAAAE,GAAG,OAAIL,EAAKK,EAAIC,YAL3B,sDASCC,MAAM,GAAD,cATN,+EAaA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA6BR,GAA7B,0FAEOC,MAAM,GAAD,OAAIJ,EAAJ,oCAA2CK,IACjDC,MAAK,SAAAtB,GAAM,OAAIA,EAAOuB,UACtBD,MAAK,SAAAE,GAAG,OAAKL,EAAKK,EAAIC,YAJ5B,sDAMCC,MAAM,GAAD,cANN,+EAUA,SAAeE,EAAtB,iDAAO,OAAP,oBAAO,WAA4B/B,EAASsB,GAArC,oEACEtB,EADF,0EAKOuB,MAAM,GAAD,OAAIJ,EAAJ,iBAAwBnB,EAAxB,oBAA2CwB,EAA3C,oBACNC,MAAK,SAAAtB,GAAM,OAAIA,EAAOuB,UACtBD,MAAK,SAAAE,GAAG,OAAKL,EAAKK,MAPxB,uDASCE,MAAM,GAAD,cATN,gFAaA,SAAevB,EAAtB,iDAAO,OAAP,oBAAO,WAA4BN,EAASsB,GAArC,0FAEOC,MAAM,GAAD,OAAIJ,EAAJ,iBAAwBnB,EAAxB,4BAAmDwB,EAAnD,oBACNC,MAAK,SAAAtB,GAAM,OAAIA,EAAOuB,UACtBD,MAAK,SAAAE,GAAG,OAAKL,EAAKK,EAAIK,SAJ5B,sDAMCH,MAAM,GAAD,cANN,+EAUA,SAAeI,EAAtB,iDAAO,OAAP,oBAAO,WAA4BjC,EAASsB,GAArC,0FAEOC,MAAM,GAAD,OAAIJ,EAAJ,iBAAwBnB,EAAxB,4BAAmDwB,EAAnD,2BACNC,MAAK,SAAAtB,GAAM,OAAIA,EAAOuB,UACtBD,MAAK,SAAAE,GAAG,OAAKL,EAAKK,EAAIC,YAJ5B,sDAMCC,MAAM,GAAD,cANN,iF","sources":["pages/Cast/Cast.jsx","servise/KEY.jsx","servise/FETCH.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useOutletContext, Navigate } from \"react-router-dom\"\nimport { FetchCredits } from \"../../servise/FETCH\"\nimport placeholder from \"../../images/placeholder.jpg\"\n\nconst Cast = () => {\n    const movieId = useOutletContext();\n\n    const [result, setResult] = useState([])\n\n    useEffect(() => {\n        FetchCredits(movieId, setResult)\n    }, [movieId])\n    \n    if (!result) { return }\n    if (result.success === false) {\n        return <Navigate to=\"*\" replace />;\n    }\n\n    return (\n        <div>\n            <ul>\n                {result.map(({ id, profile_path, name, character }) => (\n            <li key={id}>\n                <img\n                    src={profile_path ? (`https://image.tmdb.org/t/p/w500${profile_path}`) : (placeholder)}\n                    alt={`${name} poster`}\n                    width=\"200\"\n                /> \n                    <br />\n                <span>{name}</span>\n                <br />\n                <span>Character: {character}</span>\n            </li> ))}\n            </ul>\n        </div>\n    )\n}\n\nexport default Cast","const KEY = \"7b66a9815954757a118f4f7577a8110b\";\nexport default KEY","import KEY from \"./KEY\"\n\nexport const fetchPrefix = \"https://api.themoviedb.org/3/\";\n\n\nexport async function FetchSearch(request, hook) {\n\n    try {\n        await fetch(`${fetchPrefix}search/movie?api_key=${KEY}&query=${request}&language=en-US&page=1`)\n            .then(result => result.json())\n            .then(arr => hook(arr.results))\n            \n        \n    } catch (e) {\n        alert(`${e}`)\n    }\n};\n\nexport async function FetchTrending(hook) {\n    try {\n        await fetch(`${fetchPrefix}trending/all/day?api_key=${KEY}`)\n            .then(result => result.json())\n            .then(arr =>  hook(arr.results))\n    } catch (e) {\n        alert(`${e}`)\n    }\n};\n\nexport async function FetchDetails(movieId, hook) {\n    if (!movieId) {\n        return\n    }\n    try {\n        await fetch(`${fetchPrefix}movie/${movieId}?api_key=${KEY}&language=en-US`)\n            .then(result => result.json())\n            .then(arr =>  hook(arr))\n    } catch (e) {\n        alert(`${e}`)\n    }\n};\n\nexport async function FetchCredits(movieId, hook) {\n    try {\n        await fetch(`${fetchPrefix}movie/${movieId}/credits?api_key=${KEY}&language=en-US`)\n            .then(result => result.json())\n            .then(arr =>  hook(arr.cast))\n    } catch (e) {\n        alert(`${e}`)\n    }\n};\n\nexport async function FetchRewiews(movieId, hook) {\n    try {\n        await fetch(`${fetchPrefix}movie/${movieId}/reviews?api_key=${KEY}&language=en-US&page=1`)\n            .then(result => result.json())\n            .then(arr =>  hook(arr.results))\n    } catch (e) {\n        alert(`${e}`)\n    }\n};\n\n"],"names":["movieId","useOutletContext","useState","result","setResult","useEffect","FetchCredits","success","to","replace","map","id","profile_path","name","character","src","placeholder","alt","width","fetchPrefix","FetchSearch","request","hook","fetch","KEY","then","json","arr","results","alert","FetchTrending","FetchDetails","cast","FetchRewiews"],"sourceRoot":""}